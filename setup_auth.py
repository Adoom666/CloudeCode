#!/usr/bin/env python3
"""Setup script for Cloude Code authentication.

Generates TOTP secret and JWT secret, creates config file.
"""
import json
import secrets
import subprocess
import sys
from pathlib import Path


def check_and_setup_venv():
    """Ensure venv exists and has required packages."""
    # Get venv path
    project_root = Path(__file__).parent
    venv_path = project_root / "venv"
    venv_python = venv_path / "bin" / "python3"

    # Check if venv exists
    if not venv_python.exists():
        print("‚ùå venv not found at: venv/")
        print("Please create it first:")
        print("  python3 -m venv venv")
        sys.exit(1)

    # Check if dependencies are installed
    try:
        import pyotp
        import qrcode
        import jwt
        print("‚úÖ All dependencies available\n")
        return
    except ImportError as e:
        missing_module = str(e).split("'")[1] if "'" in str(e) else "unknown"
        print(f"üì¶ Missing dependency: {missing_module}")
        print("Installing auth dependencies in venv...\n")

    # Install dependencies
    try:
        result = subprocess.run([
            str(venv_python), "-m", "pip", "install", "-q",
            "pyotp", "qrcode", "pillow", "pyjwt"
        ], check=True, capture_output=True, text=True)

        print("‚úÖ Dependencies installed successfully\n")

        # Re-exec with venv python
        print("üîÑ Re-running with venv python...\n")
        subprocess.run([str(venv_python), __file__] + sys.argv[1:])
        sys.exit(0)

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to install dependencies: {e}")
        print(f"Error output: {e.stderr}")
        sys.exit(1)


def generate_totp_secret():
    """Generate a random TOTP secret."""
    import pyotp
    return pyotp.random_base32()


def generate_jwt_secret():
    """Generate a random JWT secret."""
    return secrets.token_urlsafe(32)


def update_env_file(env_path: Path, totp_secret: str, jwt_secret: str):
    """Update .env file with generated secrets."""
    # Read existing .env or create from .env.example
    if env_path.exists():
        with open(env_path) as f:
            lines = f.readlines()
    else:
        # Start from .env.example
        example_path = env_path.parent / ".env.example"
        if example_path.exists():
            with open(example_path) as f:
                lines = f.readlines()
        else:
            lines = []

    # Update or add TOTP_SECRET and JWT_SECRET
    totp_found = False
    jwt_found = False

    for i, line in enumerate(lines):
        if line.startswith("TOTP_SECRET="):
            lines[i] = f"TOTP_SECRET={totp_secret}\n"
            totp_found = True
        elif line.startswith("JWT_SECRET="):
            lines[i] = f"JWT_SECRET={jwt_secret}\n"
            jwt_found = True

    # Add if not found
    if not totp_found:
        # Find a good place to insert (after # Authentication Secrets comment if it exists)
        insert_index = len(lines)
        for i, line in enumerate(lines):
            if "# Authentication Secrets" in line:
                insert_index = i + 2  # After comment and blank TOTP_SECRET=
                break

        if insert_index >= len(lines):
            lines.append(f"\n# Authentication Secrets (generated by setup_auth.py)\n")
            lines.append(f"TOTP_SECRET={totp_secret}\n")
        else:
            lines.insert(insert_index, f"TOTP_SECRET={totp_secret}\n")

    if not jwt_found:
        # Add right after TOTP_SECRET
        for i, line in enumerate(lines):
            if line.startswith("TOTP_SECRET="):
                lines.insert(i + 1, f"JWT_SECRET={jwt_secret}\n")
                break
        else:
            lines.append(f"JWT_SECRET={jwt_secret}\n")

    # Write back
    with open(env_path, 'w') as f:
        f.writelines(lines)


def generate_qr_code(secret: str, account_name: str = "Cloude Code"):
    """Generate QR code for TOTP secret."""
    import pyotp
    import qrcode

    totp = pyotp.TOTP(secret)
    uri = totp.provisioning_uri(
        name=account_name,
        issuer_name="Cloude Code"
    )

    # Generate QR code
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(uri)
    qr.make(fit=True)

    # Print ASCII QR code to terminal
    qr.print_ascii()

    # Also save as image to project directory
    img = qr.make_image(fill_color="black", back_color="white")
    qr_path = Path(__file__).parent / "totp-qr.png"
    img.save(str(qr_path))

    return uri, qr_path

def main():
    """Main setup function."""
    # Ensure venv has required dependencies
    check_and_setup_venv()

    print("=" * 70)
    print("Cloude Code Authentication Setup")
    print("=" * 70)
    print()

    # Generate new secrets
    totp_secret = generate_totp_secret()
    jwt_secret = generate_jwt_secret()
    print("üîë Generated new authentication secrets\n")

    # Update .env file in project root
    project_root = Path(__file__).parent
    env_path = project_root / ".env"

    print(f"Updating .env file at: {env_path}")
    update_env_file(env_path, totp_secret, jwt_secret)
    print(f"‚úÖ Secrets written to .env\n")

    # Config file in project directory
    config_path = project_root / "config.json"

    # Check if config already exists
    if config_path.exists():
        print(f"üìÑ Config file exists at: {config_path}")

        # Remove secrets from existing config if they're there
        try:
            with open(config_path) as f:
                data = json.load(f)

            if "totp_secret" in data or "jwt_secret" in data:
                data.pop("totp_secret", None)
                data.pop("jwt_secret", None)

                with open(config_path, 'w') as f:
                    json.dump(data, f, indent=2)

                print("‚úÖ Removed secrets from config.json (now in .env)\n")
            else:
                print("‚úÖ Config file already clean (no secrets)\n")

        except Exception as e:
            print(f"‚ö†Ô∏è  Error cleaning config: {e}\n")

    else:
        # Create new config from example
        example_path = project_root / "config.example.json"
        with open(example_path) as f:
            config = json.load(f)

        # Remove secrets from config (they're in .env now)
        config.pop("totp_secret", None)
        config.pop("jwt_secret", None)

        # Write config WITHOUT secrets
        with open(config_path, "w") as f:
            json.dump(config, f, indent=2)

        print(f"‚úÖ Configuration file created at: {config_path}\n")

    print("=" * 70)
    print("TOTP Setup")
    print("=" * 70)
    print()
    print("Scan this QR code with your authenticator app:")
    print()

    # Generate and display QR code
    uri, qr_path = generate_qr_code(totp_secret)

    print()
    print(f"QR code also saved to: {qr_path}")
    print()
    print(f"Or manually enter this secret in your app: {totp_secret}")
    print()
    print("=" * 70)
    print("Next Steps")
    print("=" * 70)
    print()
    print("1. Scan the QR code above with Google Authenticator, Authy, or similar")
    print("2. Edit your config file to update project paths:")
    print(f"   {config_path}")
    print("3. Update the template_path to your .claude template directory")
    print("4. Start the Cloude Code server:")
    print("   ./start.sh")
    print()
    print("You're all set! Access the app and log in with your TOTP code.")
    print()

if __name__ == "__main__":
    main()
